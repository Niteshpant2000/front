{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  generateToken(request) {\n    return this.http.post(\"backend api Url\", request, {\n      responseType: 'text'\n    });\n  }\n  validateRequest(token) {\n    let tokenStr = 'Bearer ' + token;\n    const headers = new HttpHeaders().set(\"Authorization\", tokenStr);\n    return this.http.get(\"backend api url\", {\n      headers,\n      responseType: 'text'\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAEjCC,aAAa,CAACC,OAAY;IAC/B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,iBAAiB,EAAED,OAAO,EAAE;MAACE,YAAY,EAAG;IAAgB,CAAC,CAAC;EACtF;EAEOC,eAAe,CAACC,KAAU;IAC/B,IAAIC,QAAQ,GAAG,SAAS,GAACD,KAAK;IAC9B,MAAME,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC;IAChE,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAC,iBAAiB,EAAE;MAACF,OAAO;MAAEJ,YAAY,EAAG;IAAgB,CAAC,CAAC;EACrF;;AAZWN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAa,SAAXb,WAAW;EAAAc,YAFV;AAAM","names":["HttpHeaders","AuthService","constructor","http","generateToken","request","post","responseType","validateRequest","token","tokenStr","headers","set","get","factory","providedIn"],"sourceRoot":"","sources":["D:\\front\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  public generateToken(request: any){\n    return this.http.post(\"backend api Url\", request, {responseType : 'text' as 'json'});\n  }\n\n  public validateRequest(token: any){\n    let tokenStr = 'Bearer '+token;\n    const headers = new HttpHeaders().set(\"Authorization\", tokenStr);\n    return this.http.get(\"backend api url\", {headers, responseType : 'text' as 'json'});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}